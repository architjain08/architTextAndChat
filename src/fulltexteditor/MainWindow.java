/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fulltexteditor;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;
import javax.swing.KeyStroke;
import java.awt.event.KeyEvent;
import javax.swing.JComponent;
import javax.swing.Action;

/**
 *
 * @author Abhishek
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    JFileChooser choose;
    Thread serverThread;
    MyServer server;
            
    public MainWindow() {
        initComponents();  
        codeArea.registerKeyboardAction(new AutoIndentAction(), KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), JComponent.WHEN_FOCUSED);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        statusBar = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        codeArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        chatArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newButton = new javax.swing.JMenuItem();
        openButton = new javax.swing.JMenuItem();
        saveButton = new javax.swing.JMenuItem();
        saveAsButton = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        newWindowButton = new javax.swing.JMenuItem();
        exitButton = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        findButton = new javax.swing.JMenuItem();
        replaceButton = new javax.swing.JMenuItem();
        replaceAllButon = new javax.swing.JMenuItem();
        executeMenu = new javax.swing.JMenu();
        compileButton = new javax.swing.JMenuItem();
        openCMDButton = new javax.swing.JMenuItem();
        runButton = new javax.swing.JMenuItem();
        connectMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        statusBar.setEditable(false);
        statusBar.setMargin(new java.awt.Insets(0, 0, 0, 0));

        output.setEditable(false);
        output.setBackground(new java.awt.Color(1, 151, 151));
        output.setColumns(20);
        output.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        output.setForeground(new java.awt.Color(255, 255, 255));
        output.setRows(5);
        jScrollPane2.setViewportView(output);

        jTextField1.setEditable(false);
        jTextField1.setFont(new java.awt.Font("Lucida Fax", 0, 12)); // NOI18N
        jTextField1.setText("Build Output");

        codeArea.setBackground(new java.awt.Color(0, 102, 102));
        codeArea.setColumns(20);
        codeArea.setFont(new java.awt.Font("Monospaced", 0, 15)); // NOI18N
        codeArea.setForeground(new java.awt.Color(255, 255, 255));
        codeArea.setRows(5);
        jScrollPane3.setViewportView(codeArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 795, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Main", jPanel1);

        chatArea.setColumns(20);
        chatArea.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        chatArea.setRows(5);
        jScrollPane4.setViewportView(chatArea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 795, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Chat", jPanel2);

        fileMenu.setText("File");
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        newButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        fileMenu.add(newButton);

        openButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        fileMenu.add(openButton);

        saveButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        fileMenu.add(saveButton);

        saveAsButton.setText("Save as");
        saveAsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsButtonActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsButton);
        fileMenu.add(jSeparator1);

        newWindowButton.setText("New Window");
        newWindowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newWindowButtonActionPerformed(evt);
            }
        });
        fileMenu.add(newWindowButton);

        exitButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, java.awt.event.InputEvent.SHIFT_MASK));
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        fileMenu.add(exitButton);

        jMenuBar1.add(fileMenu);

        editMenu.setText("Edit");

        findButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        findButton.setText("Find");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });
        editMenu.add(findButton);

        replaceButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        replaceButton.setText("Replace");
        replaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceButtonActionPerformed(evt);
            }
        });
        editMenu.add(replaceButton);

        replaceAllButon.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK));
        replaceAllButon.setText("Replace all");
        replaceAllButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceAllButonActionPerformed(evt);
            }
        });
        editMenu.add(replaceAllButon);

        jMenuBar1.add(editMenu);

        executeMenu.setText("Execute");
        executeMenu.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                executeMenuAncestorMoved(evt);
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        compileButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        compileButton.setText("Compile");
        compileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileButtonActionPerformed(evt);
            }
        });
        executeMenu.add(compileButton);

        openCMDButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.ALT_MASK));
        openCMDButton.setText("Open cmd");
        openCMDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCMDButtonActionPerformed(evt);
            }
        });
        executeMenu.add(openCMDButton);

        runButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        executeMenu.add(runButton);

        jMenuBar1.add(executeMenu);

        connectMenu.setText("Connect");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setText("Chat");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        connectMenu.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem2.setText("Launch Server");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        connectMenu.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Stop Server");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        connectMenu.add(jMenuItem3);

        jMenuBar1.add(connectMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusBar, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jScrollPane2)
            .addComponent(jTextField1)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenuActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        choose = null;
        codeArea.setText("");
        statusBar.setText("New File Opened");
    }//GEN-LAST:event_newButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
            choose = new JFileChooser();
            int value = choose.showOpenDialog(this);
            
            if (value == JFileChooser.APPROVE_OPTION){
                
                try{
                    Scanner reader = new Scanner(choose.getSelectedFile());
                    codeArea.setText("");
                    while(reader.hasNext())
                    {
                        codeArea.append(reader.nextLine()+"\n");
                    }
                    reader.close();
                    statusBar.setText("Successfully Loaded " + choose.getSelectedFile().getAbsolutePath());
                }
                catch(Exception E){}              
            }
    }//GEN-LAST:event_openButtonActionPerformed

    private void saveAsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsButtonActionPerformed
        choose = new JFileChooser();
        int value = choose.showSaveDialog(this);
        
        if (value == JFileChooser.APPROVE_OPTION){
            try{
            PrintWriter writer = new PrintWriter(choose.getSelectedFile());
            writer.print(codeArea.getText());
            writer.close();
            }
            catch(Exception E)
            {
                
            }
            statusBar.setText("Successfully Saved");
        }
    }//GEN-LAST:event_saveAsButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
      
        String toSearch;
        String Buffer;
        int p1=0,p0;
        Highlighter highlighter = codeArea.getHighlighter();
        HighlightPainter painter = 
               new DefaultHighlighter.DefaultHighlightPainter(Color.pink);
        
        //Buffer is Current State of TextArea
        Buffer = codeArea.getText();
        toSearch = JOptionPane.showInputDialog("Find:");
        
        //If User Presses cancel
        if(toSearch == null)
            return;
        
         p0 = Buffer.indexOf(toSearch,p1);
         
         //If string is Not Found
         if(p0==-1)
             JOptionPane.showMessageDialog(null,"Not Found","Not Found",JOptionPane.ERROR_MESSAGE);
         
        while(p0!=-1)
        {
            p1 = p0 + toSearch.length();
            try{               
            highlighter.addHighlight(p0, p1, painter );
            }
            catch(Exception BE){ break; }     

            p0 = Buffer.indexOf(toSearch,p1);
        }
        statusBar.setText("");
        
    }//GEN-LAST:event_findButtonActionPerformed

    private void replaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceButtonActionPerformed
        String toReplace,newString; 
        String Buffer;
        toReplace = JOptionPane.showInputDialog("Replace:");
        newString = JOptionPane.showInputDialog("Replace With:");
        
        //If User Cancels
        
        if(toReplace == null || newString == null)
            return;
        
        Buffer = codeArea.getText();
        
        codeArea.setText(Buffer.replaceFirst(toReplace, newString));
        statusBar.setText("Successfully Replaced");
        
    }//GEN-LAST:event_replaceButtonActionPerformed

    private void replaceAllButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceAllButonActionPerformed
       
        String toReplace,newString; 
        String Buffer;
        toReplace = JOptionPane.showInputDialog("Replace:");
        newString = JOptionPane.showInputDialog("Replace With:");
        
        //If User Cancels
        if(toReplace == null || newString == null)
            return;
      
        Buffer = codeArea.getText();
        codeArea.setText(Buffer.replace(toReplace, newString));
        statusBar.setText("Successfully Replaced");
        
    }//GEN-LAST:event_replaceAllButonActionPerformed

    private void compileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileButtonActionPerformed
        
        output.setText("");
        if(choose ==  null)
            saveAsButtonActionPerformed(evt);
        Runtime rt = Runtime.getRuntime();
        String FilePath = choose.getSelectedFile().getAbsolutePath();
        String compilePath = "javac " + FilePath ;


        try {
            ProcessBuilder builder = new ProcessBuilder(
            "cmd.exe", "/c",compilePath);
        
            builder.redirectErrorStream(true);
            Process p = builder.start();
            BufferedReader r = 
                    new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line;
            line = r.readLine();
            if(line == null){
                output.setText("Successfully Compiled!!");
                return;
            }
            while (true) {
                output.append(line+"\n");
                line = r.readLine();
                if (line == null) 
                    break; 
                
            }

        }
        catch (IOException e) {
        e.printStackTrace();
        }
     
        
    }//GEN-LAST:event_compileButtonActionPerformed

    private void openCMDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCMDButtonActionPerformed
        
        try {
            Runtime.getRuntime().exec(new String[]{"cmd.exe","/c","start"});
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_openCMDButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if(choose == null)
        {
            saveAsButtonActionPerformed(evt);
            return;
        }
        try{
            PrintWriter writer = new PrintWriter(choose.getSelectedFile());
            writer.print(codeArea.getText());
            writer.close();
            }
            catch(Exception E)
            {
                
            }
            statusBar.setText("Successfully Saved");
    }//GEN-LAST:event_saveButtonActionPerformed

    private void executeMenuAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_executeMenuAncestorMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_executeMenuAncestorMoved

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        output.setText("");
        if(choose ==  null)
            saveAsButtonActionPerformed(evt);
        Runtime rt = Runtime.getRuntime();
        String FilePath = choose.getSelectedFile().getAbsolutePath();
        String compilePath = "javac " + FilePath ;
        String className;

        try {
            ProcessBuilder builder = new ProcessBuilder(
            "cmd.exe", "/c",compilePath);
        
            builder.redirectErrorStream(true);
            Process p = builder.start();
            BufferedReader r = 
                    new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line;
            line = r.readLine();
            if(line == null){
                output.setText("Successfully Compiled!!"); 
                openCMDButtonActionPerformed(evt);
                return;
            }
            while (true) {
                output.append(line+"\n");
                line = r.readLine();
                if (line == null) 
                    break; 
                
            }

        }
        catch (IOException e) {
        e.printStackTrace();
        }
     
    }//GEN-LAST:event_runButtonActionPerformed
    
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        
        MyClient newCLient = new MyClient(this);       
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
    
        serverThread = new Thread(new Runnable()
        {
            public void run()
            {
                
              
                //to avoid blockage of the main 
                   server = new MyServer();
                   String message = "Server Started "+ (server.getSocket()).toString();
                
                   if(server!=null)
                   {
                       output.setText(message);
                       System.out.println(message);
                    
                   }
                   else
                   {
                       output.setText("Oops something went wrong");
                       return;
                   }
            }
            
        });
        
        serverThread.start();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
       
        
       
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void newWindowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newWindowButtonActionPerformed
        MainWindow MW2 = new MainWindow();
        MW2.setVisible(true);
        MW2.setDefaultCloseOperation(MainWindow.HIDE_ON_CLOSE);
    }//GEN-LAST:event_newWindowButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    public String getText()
    {
        return codeArea.getText();
    }
    public void toChatWindow(String STR)
    {
        chatArea.setText(STR);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea chatArea;
    private javax.swing.JTextArea codeArea;
    private javax.swing.JMenuItem compileButton;
    private javax.swing.JMenu connectMenu;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu executeMenu;
    private javax.swing.JMenuItem exitButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem findButton;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JMenuItem newButton;
    private javax.swing.JMenuItem newWindowButton;
    private javax.swing.JMenuItem openButton;
    private javax.swing.JMenuItem openCMDButton;
    private javax.swing.JTextArea output;
    private javax.swing.JMenuItem replaceAllButon;
    private javax.swing.JMenuItem replaceButton;
    private javax.swing.JMenuItem runButton;
    private javax.swing.JMenuItem saveAsButton;
    private javax.swing.JMenuItem saveButton;
    private javax.swing.JTextField statusBar;
    // End of variables declaration//GEN-END:variables
}
